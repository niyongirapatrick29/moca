#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require('mongoose');
var app = require('../app');
var debug = require('debug')('moca:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
//mongodb+srv://niyongirapatrick29:Kike72549@cluster0.mcnqj.mongodb.net/Kimezamiryango?retryWrites=true&w=majority
const MONGODB_URI = "mongodb+srv://niyongirapatrick29:Kike72549@cluster0.mcnqj.mongodb.net/Moca?retryWrites=true&w=majority";
//local link = mongodb://localhost:27017/Moca
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
    mongoose
        .connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        })
        .then((connection) => {
            console.log("Server connected");

        })
        .catch(err => console.log(err));
}

var io = require('socket.io')(server);

io.on('connection', function(socket) {
    socket.on('message', function(msg) {
        io.emit('message', msg);
    });
});